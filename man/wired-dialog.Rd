% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/components.R
\name{wired-dialog}
\alias{wired-dialog}
\alias{wired_dialog}
\alias{show_wired_dialog}
\alias{open_wired_dialog}
\alias{close_wired_dialog}
\title{Wired Dialog (Modal)}
\usage{
wired_dialog(..., labelClose = "Close", width = "500px", id = NULL)

show_wired_dialog(ui, session = shiny::getDefaultReactiveDomain())

open_wired_dialog(id, session = shiny::getDefaultReactiveDomain())

close_wired_dialog(id, session = shiny::getDefaultReactiveDomain())
}
\arguments{
\item{...}{Content of the modal window.}

\item{labelClose}{Label for close button.}

\item{width}{Width of the dialog.}

\item{id}{Id for the dialog, can be useful to open/close dialog from server.}

\item{ui}{Result of \code{wired_dialog}.}

\item{session}{Shiny session.}
}
\description{
Wired Dialog (Modal)
}
\examples{
if (interactive()) {
  library(shiny)
  library(wired)

  ui <- fluidPage(
    tags$h2("Wired modal"),
    wired_button("show", "Show modal window"),
    wired_dialog(
      tags$div(
        style = "position: absolute; top: 5px; right: 5px;",
        wired_icon_button("close2", icon("times"))
      ),
      plotOutput("plot"),
      wired_slider("slider", "Value:"),
      id = "mydialog", labelClose = NULL
    ),
    wired_button("show2", "Show second modal window"),
  )

  server <- function(input, output, session) {

    observeEvent(input$show, {
      wired:::show_wired_dialog(
        wired:::wired_dialog(
          tags$h3("Here's a modal!"),
          tags$p(
            "Lorem ipsum dolor sit amet,",
            "consectetur adipiscing elit",
            "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
            "Ut enim ad minim veniam,",
            "quis nostrud exercitation ullamco laboris nisi ut aliquip,",
            " ex ea commodo consequat.",
            "Duis aute irure dolor in reprehenderit in voluptate velit,",
            " esse cillum dolore eu fugiat nulla pariatur."
          )
        )
      )
    })

    observeEvent(input$show2, {
      open_wired_dialog("mydialog")
    })
    observeEvent(input$close2, {
      close_wired_dialog("mydialog")
    })

    output$plot <- renderPlot({
      plot(density(rnorm(input$slider)))
    })

  }

  shinyApp(ui, server)
}

}
